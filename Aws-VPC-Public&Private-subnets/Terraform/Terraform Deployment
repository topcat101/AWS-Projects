terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}


#
# Will be rewriting the whole tf, as it needs to be neater and add other security stuff
#
provider "aws" {
  # Configuration options
  region     = "eu-west-2"
  access_key = ""
  secret_key = ""
}

resource "aws_vpc" "First_VPC" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "Production_VPC"
  }
}

resource "aws_subnet" "Public" {
  vpc_id                  = aws_vpc.First_VPC.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true

  tags = {
    Name = "Public_Subnet"
  }
}

resource "aws_subnet" "Private" {
  vpc_id                  = aws_vpc.First_VPC.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = false

  tags = {
    Name = "Private_Subnet"
  }
}

resource "aws_internet_gateway" "internet_gateway" {
  vpc_id = aws_vpc.First_VPC.id

  tags = {
    Name = "IG"
  }
}

resource "aws_route_table_association" "Asscoiate_Public_Subnet" {
  subnet_id      = aws_subnet.Public.id
  route_table_id = aws_route_table.Route_table.id
}

resource "aws_route_table" "Route_table" {
  vpc_id = aws_vpc.First_VPC.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.internet_gateway.id
  }
}

resource "aws_vpc_security_group_egress_rule" "Public_Host_Allow_SSH" {
  security_group_id = aws_security_group.SSH_Alllowed.id

  ip_protocol       = "-1"
  cidr_ipv4         = "0.0.0.0/0"
}


resource "aws_vpc_security_group_ingress_rule" "Public_Host_Allow_SSH_inbound" {
  security_group_id = aws_security_group.SSH_Alllowed.id

  cidr_ipv4   = "0.0.0.0/0"
  from_port   = 22
  ip_protocol = "tcp"
  to_port     = 22
}

resource "aws_vpc_security_group_ingress_rule" "SSH_Allowed_for_internal_use" {
  security_group_id = aws_security_group.SSH_Allowed_for_internal.id

  cidr_ipv4   = "10.0.1.0/24"
  from_port   = 22
  ip_protocol = "tcp"
  to_port     = 22
}

resource "aws_security_group" "SSH_Alllowed" {
  name        = "Allow_SSH"
  description = "Allow SSH inbound traffic"
  vpc_id      = aws_vpc.First_VPC.id

  tags = {
    Name = "SSH_Alllowed"
  }
}

resource "aws_security_group" "SSH_Allowed_for_internal" {
  name        = "SSH_Allowed_for_internal"
  description = "SSH Allowed for internal traffic"
  vpc_id      = aws_vpc.First_VPC.id

  tags = {
    Name = "SSH_Allowed_for_internal"
  }
}

resource "aws_instance" "Private_Instance" {
  ami             = "ami-044415bb13eee2391"
  instance_type   = "t3.micro"
  subnet_id       = aws_subnet.Private.id
  key_name        = "test-key-pair"
  vpc_security_group_ids = [aws_security_group.SSH_Allowed_for_internal.id]

  tags = {
    Name = "Private_Instance"
  }
}

resource "aws_instance" "Public_Instance" {
  ami             = "ami-044415bb13eee2391"
  instance_type   = "t3.micro"
  subnet_id       = aws_subnet.Public.id
  key_name        = "test-key-pair"
  vpc_security_group_ids = [aws_security_group.SSH_Alllowed.id]

  tags = {
    Name = "Public_Instance"
  }
}
